{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BasicDataAnalysis_Mayank.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "mount_file_id": "1HEtomsNpAmziX3mmJ7lAwHfMue45Hkdu",
      "authorship_tag": "ABX9TyNR1XfOyR4LHV3KqulOja2i",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "9a5446167b0c43c29e3b3fd6b75d6aab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_8efb817ba7344778b112cca8104b8337",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_bf41103de87e42a69ca7f3ff9df74b43",
              "IPY_MODEL_1a90a99e1778485ab9869a260cf3f7b2"
            ]
          }
        },
        "8efb817ba7344778b112cca8104b8337": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "bf41103de87e42a69ca7f3ff9df74b43": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_160d375a2f384aa59122489ff5ef869e",
            "_dom_classes": [],
            "description": "100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 5,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 5,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5691013d4eac4019891988556056a10b"
          }
        },
        "1a90a99e1778485ab9869a260cf3f7b2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_853f383552ea4567b7736c7752d7fe9f",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 5/5 [03:10&lt;00:00, 38.06s/it]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_37029ed4db47409ba8e11d88f203beee"
          }
        },
        "160d375a2f384aa59122489ff5ef869e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5691013d4eac4019891988556056a10b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "853f383552ea4567b7736c7752d7fe9f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "37029ed4db47409ba8e11d88f203beee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6860fc8a176d4b42ba5aaddac3e01f15": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6ae6eaec51a74bfea6c8277ce2f5c732",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_0634558cc1db4151813185a71dc07ba5",
              "IPY_MODEL_d3c13e8189794b1cb1506120c2ae1978"
            ]
          }
        },
        "6ae6eaec51a74bfea6c8277ce2f5c732": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0634558cc1db4151813185a71dc07ba5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_801a29f717e34b7986efe6e3d4429d85",
            "_dom_classes": [],
            "description": "Epoch 1: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 316,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 316,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1f25ca8cb65f424fa54d6c7cea0a7db6"
          }
        },
        "d3c13e8189794b1cb1506120c2ae1978": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d1eda042ad1544e2a1158a788503a467",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 316/316 [00:34&lt;00:00,  9.23it/s, training_loss=0.664]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_02822d27d1424b77bbcb159c2b4e00cf"
          }
        },
        "801a29f717e34b7986efe6e3d4429d85": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1f25ca8cb65f424fa54d6c7cea0a7db6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d1eda042ad1544e2a1158a788503a467": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "02822d27d1424b77bbcb159c2b4e00cf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "3ae3788f25404c0eb3951b10b7d6bb20": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_c869dbbbc4bb4eeba51a41462dbd932e",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_5287771d6a0946f0b1f0051f2e39f36c",
              "IPY_MODEL_384e3da7d87840b580a3b7085935246a"
            ]
          }
        },
        "c869dbbbc4bb4eeba51a41462dbd932e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5287771d6a0946f0b1f0051f2e39f36c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_bffdfd68eff643529198e8ddd9606a41",
            "_dom_classes": [],
            "description": "Epoch 2: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 316,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 316,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_17da93da47624a28afe72766e65585db"
          }
        },
        "384e3da7d87840b580a3b7085935246a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_343c79af8d444c87a46eb0acafcf1278",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 316/316 [00:34&lt;00:00,  9.36it/s, training_loss=0.062]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_4a433fc056eb432ca21cc3fcf5fc2e1f"
          }
        },
        "bffdfd68eff643529198e8ddd9606a41": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "17da93da47624a28afe72766e65585db": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "343c79af8d444c87a46eb0acafcf1278": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "4a433fc056eb432ca21cc3fcf5fc2e1f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "12ef557fd65c4295978ce399c91a6204": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_4867ff650b7b4ac6a1611659665fc9b3",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d70fb9fe2f9942cab682b50474c5e89c",
              "IPY_MODEL_3eba690872a84e908ef5d3b8a57c2186"
            ]
          }
        },
        "4867ff650b7b4ac6a1611659665fc9b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d70fb9fe2f9942cab682b50474c5e89c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_c41f8fe1f2234c36aa22d18bd1a5be00",
            "_dom_classes": [],
            "description": "Epoch 3: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 316,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 316,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_90dc0f0dfe504dd38112f76c2263553b"
          }
        },
        "3eba690872a84e908ef5d3b8a57c2186": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_5490a1c45fb5452993f7ebf6a23002ea",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 316/316 [00:34&lt;00:00,  9.11it/s, training_loss=0.007]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_096b2edcfbf141a98e619e667359710d"
          }
        },
        "c41f8fe1f2234c36aa22d18bd1a5be00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "90dc0f0dfe504dd38112f76c2263553b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5490a1c45fb5452993f7ebf6a23002ea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "096b2edcfbf141a98e619e667359710d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b21a131872b0415c9ce51ad236f49a07": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_7aabb21c7c304f5681d0812f600deb9b",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_b6f0df287227449ba75354bc4d3f2478",
              "IPY_MODEL_73f529e2bcb848d68d836e3de4ebeaa9"
            ]
          }
        },
        "7aabb21c7c304f5681d0812f600deb9b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b6f0df287227449ba75354bc4d3f2478": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_ec43a80cb29c45ad89732432a8c039c4",
            "_dom_classes": [],
            "description": "Epoch 4: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 316,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 316,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_73391f5c879f4b5db51caf7dfafe3d32"
          }
        },
        "73f529e2bcb848d68d836e3de4ebeaa9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_5d8ec89b493f4699987b56b2989d5a79",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 316/316 [00:34&lt;00:00,  9.42it/s, training_loss=0.002]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ea2c2f2d1f724e3595c0246806d07b92"
          }
        },
        "ec43a80cb29c45ad89732432a8c039c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "73391f5c879f4b5db51caf7dfafe3d32": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "5d8ec89b493f4699987b56b2989d5a79": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ea2c2f2d1f724e3595c0246806d07b92": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9860ba26a8be4fddbd7d6597800ce104": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_52b71efb53614b498f71bf9c092e2eae",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_1aebac9e51f04232bb9fbc2a937af781",
              "IPY_MODEL_0f650dc199a44054a3066574f083c2d9"
            ]
          }
        },
        "52b71efb53614b498f71bf9c092e2eae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "1aebac9e51f04232bb9fbc2a937af781": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_32263708bba749209ed82706894bc16c",
            "_dom_classes": [],
            "description": "Epoch 5: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 316,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 316,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_596f5503152843b195bf4a5ccac21143"
          }
        },
        "0f650dc199a44054a3066574f083c2d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_99d1b4c6b5324fa5b366a2d571fdcbee",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 316/316 [00:34&lt;00:00,  9.11it/s, training_loss=0.002]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_ed0b6d9f72d9473da7615b295825b525"
          }
        },
        "32263708bba749209ed82706894bc16c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "596f5503152843b195bf4a5ccac21143": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "99d1b4c6b5324fa5b366a2d571fdcbee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "ed0b6d9f72d9473da7615b295825b525": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mayankshouche/DSLabFinalProject/blob/main/Bert_Fine_Tuning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "meENdd-B7kzc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36e31c15-6dc2-48f9-ab35-70e3d80c66cf"
      },
      "source": [
        "!pip install transformers datasets tweet-preprocessor"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting transformers\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/99/84/7bc03215279f603125d844bf81c3fb3f2d50fe8e511546eb4897e4be2067/transformers-4.0.0-py3-none-any.whl (1.4MB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1.4MB 22.6MB/s \n",
            "\u001b[?25hCollecting datasets\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1a/38/0c24dce24767386123d528d27109024220db0e7a04467b658d587695241a/datasets-1.1.3-py3-none-any.whl (153kB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 163kB 61.2MB/s \n",
            "\u001b[?25hCollecting tweet-preprocessor\n",
            "  Downloading https://files.pythonhosted.org/packages/17/9d/71bd016a9edcef8860c607e531f30bd09b13103c7951ae73dd2bf174163c/tweet_preprocessor-0.6.0-py3-none-any.whl\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.6/dist-packages (from transformers) (4.41.1)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.6/dist-packages (from transformers) (2019.12.20)\n",
            "Requirement already satisfied: dataclasses; python_version < \"3.7\" in /usr/local/lib/python3.6/dist-packages (from transformers) (0.8)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.6/dist-packages (from transformers) (3.0.12)\n",
            "Collecting sacremoses\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7d/34/09d19aff26edcc8eb2a01bed8e98f13a1537005d31e95233fd48216eed10/sacremoses-0.0.43.tar.gz (883kB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 890kB 51.0MB/s \n",
            "\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.6/dist-packages (from transformers) (20.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from transformers) (2.23.0)\n",
            "Collecting tokenizers==0.9.4\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/0f/1c/e789a8b12e28be5bc1ce2156cf87cb522b379be9cadc7ad8091a4cc107c4/tokenizers-0.9.4-cp36-cp36m-manylinux2010_x86_64.whl (2.9MB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2.9MB 51.3MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from transformers) (1.18.5)\n",
            "Requirement already satisfied: dill in /usr/local/lib/python3.6/dist-packages (from datasets) (0.3.3)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from datasets) (1.1.4)\n",
            "Collecting pyarrow>=0.17.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d7/e1/27958a70848f8f7089bff8d6ebe42519daf01f976d28b481e1bfd52c8097/pyarrow-2.0.0-cp36-cp36m-manylinux2014_x86_64.whl (17.7MB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 17.7MB 214kB/s \n",
            "\u001b[?25hCollecting xxhash\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f7/73/826b19f3594756cb1c6c23d2fbd8ca6a77a9cd3b650c9dec5acc85004c38/xxhash-2.0.0-cp36-cp36m-manylinux2010_x86_64.whl (242kB)\n",
            "\u001b[K     |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 245kB 59.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: multiprocess in /usr/local/lib/python3.6/dist-packages (from datasets) (0.70.11.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers) (1.15.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers) (7.1.2)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers) (0.17.0)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from packaging->transformers) (2.4.7)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (1.24.3)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->transformers) (2020.11.8)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas->datasets) (2.8.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas->datasets) (2018.9)\n",
            "Building wheels for collected packages: sacremoses\n",
            "  Building wheel for sacremoses (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sacremoses: filename=sacremoses-0.0.43-cp36-none-any.whl size=893257 sha256=d0804bb7803dc3567e9736ddc7a1e12e354fbfb6268863d57b9742429b3a4149\n",
            "  Stored in directory: /root/.cache/pip/wheels/29/3c/fd/7ce5c3f0666dab31a50123635e6fb5e19ceb42ce38d4e58f45\n",
            "Successfully built sacremoses\n",
            "Installing collected packages: sacremoses, tokenizers, transformers, pyarrow, xxhash, datasets, tweet-preprocessor\n",
            "  Found existing installation: pyarrow 0.14.1\n",
            "    Uninstalling pyarrow-0.14.1:\n",
            "      Successfully uninstalled pyarrow-0.14.1\n",
            "Successfully installed datasets-1.1.3 pyarrow-2.0.0 sacremoses-0.0.43 tokenizers-0.9.4 transformers-4.0.0 tweet-preprocessor-0.6.0 xxhash-2.0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_guPtNMu1SKb"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import wordcloud\n",
        "import preprocessor as p # tweet-preprocessor\n",
        "import nltk\n",
        "import re\n",
        "import seaborn as sns\n",
        "import torch\n",
        "\n",
        "from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments, AdamW, get_linear_schedule_with_warmup\n",
        "from sklearn.metrics import accuracy_score, roc_auc_score\n",
        "from datasets import Dataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "from scipy.special import softmax\n",
        "from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n",
        "from tqdm.notebook import tqdm"
      ],
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "HypKeQo12fKa",
        "outputId": "1b554bdd-d0fd-41a7-9773-51b69eb4a900"
      },
      "source": [
        "dataset = pd.read_csv('/content/drive/MyDrive/Copy of tweets_3k.csv', index_col=0)\n",
        "dataset.head()"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Created-At</th>\n",
              "      <th>From-User-Id</th>\n",
              "      <th>To-User-Id</th>\n",
              "      <th>Language</th>\n",
              "      <th>Retweet-Count</th>\n",
              "      <th>PartyName</th>\n",
              "      <th>Id</th>\n",
              "      <th>Score</th>\n",
              "      <th>Scoring String</th>\n",
              "      <th>Negativity</th>\n",
              "      <th>Positivity</th>\n",
              "      <th>Uncovered Tokens</th>\n",
              "      <th>Total Tokens</th>\n",
              "      <th>State</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-10-05 13:48:00</td>\n",
              "      <td>267405095</td>\n",
              "      <td>-1</td>\n",
              "      <td>en</td>\n",
              "      <td>1264.0</td>\n",
              "      <td>Democrats</td>\n",
              "      <td>1313068582805270529</td>\n",
              "      <td>1.487179</td>\n",
              "      <td>actively (0.33)  win (0.72)  party (0.44)</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.487179</td>\n",
              "      <td>26</td>\n",
              "      <td>29</td>\n",
              "      <td>Arizona</td>\n",
              "      <td>RT @IngrahamAngle: Reminder: China, still acti...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-09-10 04:25:00</td>\n",
              "      <td>29928823</td>\n",
              "      <td>-1</td>\n",
              "      <td>en</td>\n",
              "      <td>105.0</td>\n",
              "      <td>Republicans</td>\n",
              "      <td>1303867078458445826</td>\n",
              "      <td>1.307692</td>\n",
              "      <td>smart (0.44)  smart (0.44)  smart (0.44)</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.307692</td>\n",
              "      <td>24</td>\n",
              "      <td>27</td>\n",
              "      <td>North Carolina</td>\n",
              "      <td>RT @MsAvaArmstrong: Smart suburban women WILL ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-07-13 07:50:00</td>\n",
              "      <td>13165482</td>\n",
              "      <td>-1</td>\n",
              "      <td>en</td>\n",
              "      <td>538.0</td>\n",
              "      <td>Republicans</td>\n",
              "      <td>1282537894121484288</td>\n",
              "      <td>1.179487</td>\n",
              "      <td>trust (0.59)  trust (0.59)</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.179487</td>\n",
              "      <td>30</td>\n",
              "      <td>32</td>\n",
              "      <td>Texas</td>\n",
              "      <td>RT @AynRandPaulRyan: 26% of voters trust Trump...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-11-05 06:48:00</td>\n",
              "      <td>479964312</td>\n",
              "      <td>-1</td>\n",
              "      <td>en</td>\n",
              "      <td>70136.0</td>\n",
              "      <td>Democrats</td>\n",
              "      <td>1324196851034345472</td>\n",
              "      <td>1.564103</td>\n",
              "      <td>supporters (0.49)  like (0.38)  won (0.69)</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.564103</td>\n",
              "      <td>19</td>\n",
              "      <td>22</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>RT @Vic_Goes: Tr*mp supporters really abt to b...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-08-20 04:11:00</td>\n",
              "      <td>987817704072495104</td>\n",
              "      <td>-1</td>\n",
              "      <td>en</td>\n",
              "      <td>16267.0</td>\n",
              "      <td>Democrats</td>\n",
              "      <td>1296253496061120514</td>\n",
              "      <td>1.076923</td>\n",
              "      <td>proud (0.54)  proud (0.54)</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.076923</td>\n",
              "      <td>29</td>\n",
              "      <td>31</td>\n",
              "      <td>Utah</td>\n",
              "      <td>RT @NaomiBiden: I am proud to be your granddau...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            Created-At  ...                                               Text\n",
              "0  2020-10-05 13:48:00  ...  RT @IngrahamAngle: Reminder: China, still acti...\n",
              "1  2020-09-10 04:25:00  ...  RT @MsAvaArmstrong: Smart suburban women WILL ...\n",
              "2  2020-07-13 07:50:00  ...  RT @AynRandPaulRyan: 26% of voters trust Trump...\n",
              "3  2020-11-05 06:48:00  ...  RT @Vic_Goes: Tr*mp supporters really abt to b...\n",
              "4  2020-08-20 04:11:00  ...  RT @NaomiBiden: I am proud to be your granddau...\n",
              "\n",
              "[5 rows x 15 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "id": "_3ag4brh2u20",
        "outputId": "e01f8634-3d95-471a-ad5f-cecbbfdc889e"
      },
      "source": [
        "print(f\"States: {dataset['State'].nunique()}\")\n",
        "dataset[\"State\"].value_counts().plot.bar()"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "States: 50\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2b7c82cd30>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "etdAP-2Z39k4"
      },
      "source": [
        "### Build dataset for classification"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t-2XQbD631J9"
      },
      "source": [
        "dataset_final = dataset.copy()\n",
        "\n",
        "LABEL_MAP = {\n",
        "    \"AntiDemocrats\": 0,\n",
        "    \"ProDemocrats\": 1,\n",
        "    \"AntiRepublicans\": 2,\n",
        "    \"ProRepublicans\": 3\n",
        "}\n",
        "\n",
        "def buildLabels(row):\n",
        "  if row[\"Score\"] < 0:\n",
        "    return LABEL_MAP.get(\"Anti\" + row[\"PartyName\"])\n",
        "  else:\n",
        "    return LABEL_MAP.get(\"Pro\" + row[\"PartyName\"])\n",
        "\n",
        "def cleanTweet(row):\n",
        "  tweet = row[\"Text\"]\n",
        "  tweet = str(p.clean(tweet))\n",
        "  tweet = re.sub(r'[^\\w\\s]', '', tweet) # punctuation\n",
        "  tweet = re.sub(\"^\\d+\\s|\\s\\d+\\s|\\s\\d+$\", \" \", tweet) # numbers\n",
        "  return tweet\n",
        "\n",
        "  \n",
        "dataset_final[\"label\"] = dataset_final.apply(lambda row: buildLabels(row), axis=1)\n",
        "dataset_final[\"clean_text\"] = dataset_final.apply(lambda row: cleanTweet(row), \n",
        "                                                  axis=1)"
      ],
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C6JbCNxH6c9H"
      },
      "source": [
        "dataset_final.drop(columns=['Created-At', 'From-User-Id', 'To-User-Id', 'Language',\n",
        "                           'Retweet-Count', 'PartyName', 'Id', 'Score', 'Scoring String',\n",
        "                           'Negativity', 'Positivity', 'Uncovered Tokens', 'Total Tokens'],\n",
        "                   inplace=True)"
      ],
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BltNRZ4kVLEX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "outputId": "667fdd43-6014-4995-93e0-c77cb054f627"
      },
      "source": [
        "X_train, X_val, y_train, y_val = train_test_split(dataset_final.index.values, \n",
        "                                                  dataset_final.label.values, \n",
        "                                                  test_size=0.15, \n",
        "                                                  random_state=42, \n",
        "                                                  stratify=dataset_final.label.values)\n",
        "\n",
        "dataset_final['data_type'] = ['not_set']*dataset_final.shape[0]\n",
        "\n",
        "dataset_final.loc[X_train, 'data_type'] = 'train'\n",
        "dataset_final.loc[X_val, 'data_type'] = 'test'\n",
        "dataset_final.groupby(['label', 'data_type']).count()"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Text</th>\n",
              "      <th>clean_text</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>label</th>\n",
              "      <th>data_type</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">0</th>\n",
              "      <th>test</th>\n",
              "      <td>35</td>\n",
              "      <td>35</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>train</th>\n",
              "      <td>197</td>\n",
              "      <td>197</td>\n",
              "      <td>197</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
              "      <th>test</th>\n",
              "      <td>73</td>\n",
              "      <td>73</td>\n",
              "      <td>73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>train</th>\n",
              "      <td>415</td>\n",
              "      <td>415</td>\n",
              "      <td>415</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">2</th>\n",
              "      <th>test</th>\n",
              "      <td>189</td>\n",
              "      <td>189</td>\n",
              "      <td>189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>train</th>\n",
              "      <td>1068</td>\n",
              "      <td>1071</td>\n",
              "      <td>1071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">3</th>\n",
              "      <th>test</th>\n",
              "      <td>148</td>\n",
              "      <td>148</td>\n",
              "      <td>148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>train</th>\n",
              "      <td>836</td>\n",
              "      <td>838</td>\n",
              "      <td>838</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 State  Text  clean_text\n",
              "label data_type                         \n",
              "0     test          35    35          35\n",
              "      train        197   197         197\n",
              "1     test          73    73          73\n",
              "      train        415   415         415\n",
              "2     test         189   189         189\n",
              "      train       1068  1071        1071\n",
              "3     test         148   148         148\n",
              "      train        836   838         838"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9DWUgC8A77k7"
      },
      "source": [
        "### Try out BERTForSequenceClassification to see how it goes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FXsMadeR7esY"
      },
      "source": [
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', \n",
        "                                          do_lower_case=True)"
      ],
      "execution_count": 87,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "nij6ZpYA9_kQ",
        "outputId": "7844291e-e995-4f18-c090-912eac5dc9f7"
      },
      "source": [
        "# find distribution of length of tokenized tweets\n",
        "lens = []\n",
        "\n",
        "for tweet in dataset_final.clean_text:\n",
        "  tokens = tokenizer.encode(tweet, max_length=512)\n",
        "  lens.append(len(tokens))\n",
        "\n",
        "sns.displot(lens)\n",
        "plt.xlim([0, 128])"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.0, 128.0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PepEuSPxMxXB"
      },
      "source": [
        "# tokenize train and test data so BERT can understand it\n",
        "encoded_data_train = tokenizer.batch_encode_plus(\n",
        "    dataset_final[dataset_final.data_type=='train'].clean_text.values, \n",
        "    add_special_tokens=True, \n",
        "    return_attention_mask=True, \n",
        "    padding=True,\n",
        "    max_length=64, \n",
        "    return_tensors='pt'\n",
        ")\n",
        "\n",
        "encoded_data_test = tokenizer.batch_encode_plus(\n",
        "    dataset_final[dataset_final.data_type=='test'].clean_text.values, \n",
        "    add_special_tokens=True, \n",
        "    return_attention_mask=True, \n",
        "    padding=True, \n",
        "    max_length=64, \n",
        "    return_tensors='pt'\n",
        ")\n",
        "\n",
        "\n",
        "# destructure out the input_ids, attention masks, and labels from tokenizer & encoder output\n",
        "input_ids_train = encoded_data_train['input_ids']\n",
        "attention_masks_train = encoded_data_train['attention_mask']\n",
        "labels_train = torch.tensor(dataset_final[dataset_final.data_type=='train'].label.values)\n",
        "\n",
        "input_ids_test = encoded_data_test['input_ids']\n",
        "attention_masks_test = encoded_data_test['attention_mask']\n",
        "labels_test = torch.tensor(dataset_final[dataset_final.data_type=='test'].label.values)"
      ],
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hKPK7e_fHkGA"
      },
      "source": [
        "train_data = TensorDataset(input_ids_train, attention_masks_train, labels_train)\n",
        "test_data = TensorDataset(input_ids_test, attention_masks_test, labels_test)\n",
        "\n",
        "BATCH_SIZE = 8\n",
        "\n",
        "train_dataloader = DataLoader(train_data, \n",
        "                              sampler=RandomSampler(train_data), \n",
        "                              batch_size=BATCH_SIZE)\n",
        "\n",
        "test_dataloader = DataLoader(test_data,\n",
        "                             sampler=SequentialSampler(test_data),\n",
        "                             batch_size=BATCH_SIZE)"
      ],
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A19w_R5gIdWu",
        "outputId": "02baf370-9767-49df-8d85-83f505de5b40"
      },
      "source": [
        "model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n",
        "                                                      num_labels=4,\n",
        "                                                      output_attentions=False,\n",
        "                                                      output_hidden_states=False)"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.predictions.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias']\n",
            "- This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.weight', 'classifier.bias']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y6Lh-x1QIxnu"
      },
      "source": [
        "EPOCHS = 5\n",
        "\n",
        "optimizer = AdamW(model.parameters(),\n",
        "                  lr=1e-5,\n",
        "                  eps=1e-8)\n",
        "scheduler = get_linear_schedule_with_warmup(optimizer,\n",
        "                                            num_warmup_steps=0, \n",
        "                                            num_training_steps=len(train_dataloader)*EPOCHS)"
      ],
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DF38DtKuacAV"
      },
      "source": [
        "def auc_score(preds, labels):\n",
        "  soft_preds = softmax(preds, axis=1) # logit -> probability\n",
        "  return roc_auc_score(labels, soft_preds, multi_class='ovr')\n",
        "\n",
        "def acc_score_by_class(preds, labels):\n",
        "  label_dict_inverse = {v: k for k, v in LABEL_MAP.items()} \n",
        "\n",
        "  preds_flat = np.argmax(preds, axis=1).flatten()\n",
        "  labels_flat = labels.flatten()\n",
        "\n",
        "  for label in np.unique(labels_flat):\n",
        "    y_preds = preds_flat[labels_flat==label]\n",
        "    y_true = labels_flat[labels_flat==label]\n",
        "    print(f'Class: {label_dict_inverse[label]}')\n",
        "    print(f'Accuracy: {len(y_preds[y_preds==label])}/{len(y_true)}\\n')"
      ],
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vRbjdnbzbeA0"
      },
      "source": [
        "following is mostly taken from [this medium article](https://towardsdatascience.com/multi-class-text-classification-with-deep-learning-using-bert-b59ca2f5c613)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t-Md3mjuQLo-"
      },
      "source": [
        "def evaluate(dataloader):\n",
        "  model.eval()\n",
        "\n",
        "  loss_val_total = 0\n",
        "  predictions, true_vals = [], []\n",
        "  \n",
        "  for batch in dataloader:\n",
        "      \n",
        "      # convert data to CUDA\n",
        "      batch = tuple(b.to(device) for b in batch)\n",
        "      \n",
        "      inputs = {\n",
        "          'input_ids':      batch[0],\n",
        "          'attention_mask': batch[1],\n",
        "          'labels':         batch[2],\n",
        "      }\n",
        "\n",
        "      with torch.no_grad():        \n",
        "          outputs = model(**inputs) # get predictions\n",
        "          \n",
        "      loss = outputs[0]\n",
        "      logits = outputs[1]\n",
        "      loss_val_total += loss.item()\n",
        "\n",
        "      logits = logits.detach().cpu().numpy()\n",
        "      label_ids = inputs['labels'].cpu().numpy()\n",
        "      predictions.append(logits)\n",
        "      true_vals.append(label_ids)\n",
        "  \n",
        "  loss_val_avg = loss_val_total/len(dataloader) \n",
        "  \n",
        "  predictions = np.concatenate(predictions, axis=0)\n",
        "  true_vals = np.concatenate(true_vals, axis=0)\n",
        "          \n",
        "  return loss_val_avg, predictions, true_vals"
      ],
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "utsFA7wkP4DH"
      },
      "source": [
        "import random\n",
        "\n",
        "seed_val = 42\n",
        "random.seed(seed_val)\n",
        "np.random.seed(seed_val)\n",
        "torch.manual_seed(seed_val)\n",
        "torch.cuda.manual_seed_all(seed_val)\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "model.to(device)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "tLzmB0PTaSS2",
        "outputId": "1ded67f6-f881-48cf-fc18-39f53d0df79f"
      },
      "source": [
        "print(device)\n",
        "torch.cuda.get_device_name(0)"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "cuda\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Tesla T4'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491,
          "referenced_widgets": [
            "9a5446167b0c43c29e3b3fd6b75d6aab",
            "8efb817ba7344778b112cca8104b8337",
            "bf41103de87e42a69ca7f3ff9df74b43",
            "1a90a99e1778485ab9869a260cf3f7b2",
            "160d375a2f384aa59122489ff5ef869e",
            "5691013d4eac4019891988556056a10b",
            "853f383552ea4567b7736c7752d7fe9f",
            "37029ed4db47409ba8e11d88f203beee",
            "6860fc8a176d4b42ba5aaddac3e01f15",
            "6ae6eaec51a74bfea6c8277ce2f5c732",
            "0634558cc1db4151813185a71dc07ba5",
            "d3c13e8189794b1cb1506120c2ae1978",
            "801a29f717e34b7986efe6e3d4429d85",
            "1f25ca8cb65f424fa54d6c7cea0a7db6",
            "d1eda042ad1544e2a1158a788503a467",
            "02822d27d1424b77bbcb159c2b4e00cf",
            "3ae3788f25404c0eb3951b10b7d6bb20",
            "c869dbbbc4bb4eeba51a41462dbd932e",
            "5287771d6a0946f0b1f0051f2e39f36c",
            "384e3da7d87840b580a3b7085935246a",
            "bffdfd68eff643529198e8ddd9606a41",
            "17da93da47624a28afe72766e65585db",
            "343c79af8d444c87a46eb0acafcf1278",
            "4a433fc056eb432ca21cc3fcf5fc2e1f",
            "12ef557fd65c4295978ce399c91a6204",
            "4867ff650b7b4ac6a1611659665fc9b3",
            "d70fb9fe2f9942cab682b50474c5e89c",
            "3eba690872a84e908ef5d3b8a57c2186",
            "c41f8fe1f2234c36aa22d18bd1a5be00",
            "90dc0f0dfe504dd38112f76c2263553b",
            "5490a1c45fb5452993f7ebf6a23002ea",
            "096b2edcfbf141a98e619e667359710d",
            "b21a131872b0415c9ce51ad236f49a07",
            "7aabb21c7c304f5681d0812f600deb9b",
            "b6f0df287227449ba75354bc4d3f2478",
            "73f529e2bcb848d68d836e3de4ebeaa9",
            "ec43a80cb29c45ad89732432a8c039c4",
            "73391f5c879f4b5db51caf7dfafe3d32",
            "5d8ec89b493f4699987b56b2989d5a79",
            "ea2c2f2d1f724e3595c0246806d07b92",
            "9860ba26a8be4fddbd7d6597800ce104",
            "52b71efb53614b498f71bf9c092e2eae",
            "1aebac9e51f04232bb9fbc2a937af781",
            "0f650dc199a44054a3066574f083c2d9",
            "32263708bba749209ed82706894bc16c",
            "596f5503152843b195bf4a5ccac21143",
            "99d1b4c6b5324fa5b366a2d571fdcbee",
            "ed0b6d9f72d9473da7615b295825b525"
          ]
        },
        "id": "T3TeYtbrQ16r",
        "outputId": "157d8070-92d2-4de0-a9bd-e1bb9be9ab74"
      },
      "source": [
        "for epoch in tqdm(range(1, EPOCHS+1)): # use tqdm for a progress bar\n",
        "  model.train() # enter training mode\n",
        "  loss_train_total = 0\n",
        "\n",
        "  progress_bar = tqdm(train_dataloader, desc=f'Epoch {epoch}', leave=False, disable=False)\n",
        "  for batch in progress_bar:\n",
        "      model.zero_grad()\n",
        "      \n",
        "      # get CUDA data\n",
        "      batch = tuple(b.to(device) for b in batch)\n",
        "      \n",
        "      inputs = {\n",
        "          'input_ids':      batch[0],\n",
        "          'attention_mask': batch[1],\n",
        "          'labels':         batch[2],\n",
        "      }\n",
        "\n",
        "      outputs = model(**inputs) # evaluate\n",
        "      \n",
        "      # for reference, we are using cross-entropy loss here,\n",
        "      # as implemented in https://huggingface.co/transformers/_modules/transformers/modeling_bert.html\n",
        "      loss = outputs[0]\n",
        "      loss_train_total += loss.item()\n",
        "      loss.backward() # do backprop\n",
        "\n",
        "      torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
        "\n",
        "      optimizer.step()\n",
        "      scheduler.step()\n",
        "      \n",
        "      progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()/len(batch))})\n",
        "        \n",
        "      \n",
        "  torch.save(model.state_dict(), f'/content/drive/MyDrive/finetuned_BERT_epoch_{epoch}.model')\n",
        "      \n",
        "  tqdm.write(f'\\nEpoch {epoch}')\n",
        "  \n",
        "  loss_train_avg = loss_train_total/len(train_dataloader)            \n",
        "  tqdm.write(f'Training loss: {loss_train_avg}')\n",
        "  \n",
        "  val_loss, predictions, true_vals = evaluate(test_dataloader)\n",
        "  auc = auc_score(predictions, true_vals)\n",
        "  tqdm.write(f'Testing loss: {val_loss}')\n",
        "  tqdm.write(f'AUC: {auc}')"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9a5446167b0c43c29e3b3fd6b75d6aab",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, max=5.0), HTML(value='')))"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "6860fc8a176d4b42ba5aaddac3e01f15",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Epoch 1', max=316.0, style=ProgressStyle(description_widtâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\r\r\r\r\r\r\r\n",
            "Epoch 1\n",
            "Training loss: 0.8068105222869523\n",
            "Testing loss: 0.47174283489584923\n",
            "AUC: 0.9561602080670061\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "3ae3788f25404c0eb3951b10b7d6bb20",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Epoch 2', max=316.0, style=ProgressStyle(description_widtâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\r\r\r\r\r\r\r\n",
            "Epoch 2\n",
            "Training loss: 0.3969964378902429\n",
            "Testing loss: 0.4183510930077838\n",
            "AUC: 0.9616062380521392\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "12ef557fd65c4295978ce399c91a6204",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Epoch 3', max=316.0, style=ProgressStyle(description_widtâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\r\r\r\r\r\r\r\n",
            "Epoch 3\n",
            "Training loss: 0.26676357622977487\n",
            "Testing loss: 0.3663029841845855\n",
            "AUC: 0.9691803783179397\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b21a131872b0415c9ce51ad236f49a07",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Epoch 4', max=316.0, style=ProgressStyle(description_widtâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\r\r\r\r\r\r\r\n",
            "Epoch 4\n",
            "Training loss: 0.20062267333357536\n",
            "Testing loss: 0.42970010355514077\n",
            "AUC: 0.9674363605136527\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "9860ba26a8be4fddbd7d6597800ce104",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Epoch 5', max=316.0, style=ProgressStyle(description_widtâ€¦"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\r\r\r\r\r\r\r\n",
            "Epoch 5\n",
            "Training loss: 0.14935231977584476\n",
            "Testing loss: 0.4369828942165311\n",
            "AUC: 0.9684803161664683\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f14KlRyyQJ6S",
        "outputId": "b1af61e9-4731-4fd4-da01-5407f2cf0cc3"
      },
      "source": [
        "_, preds, true_vals = evaluate(test_dataloader)\n",
        "acc_score_by_class(preds, true_vals)"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Class: AntiDemocrats\n",
            "Accuracy: 26/35\n",
            "\n",
            "Class: ProDemocrats\n",
            "Accuracy: 52/73\n",
            "\n",
            "Class: AntiRepublicans\n",
            "Accuracy: 184/189\n",
            "\n",
            "Class: ProRepublicans\n",
            "Accuracy: 134/148\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}